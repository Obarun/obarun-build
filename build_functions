#!/bin/bash
#
# Functions file for obarun-build package
#
# Authors:
# Eric Vidal <eric@obarun.org>
#
# Copyright (C) 2016 Eric Vidal <eric@obarun.org>
#
# "THE BEERWARE LICENSE" (Revision 42):
# <eric@obarun.org> wrote this file.  As long as you retain this notice you
# can do whatever you want with this stuff. If we meet some day, and you think
# this stuff is worth it, you can buy me a beer in return.   Eric Vidal http://obarun.org
#
# This script is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 

shopt -s extglob

source /usr/lib/obarun/common_functions
source /etc/obarun/build.conf

templates="${templates:-/usr/share/obarun/obarun-build/templates}"
workdir="container"
workconf="config"

clean_install(){
	echo_bold "clean install"
	
	exit
}

usage(){
	cat << EOF
	
${bold}Usage: ${0} [General options] [Sub options] name

e.g obarun-build Create create container
    obarun-build C c container
    obarun-build B b cups${reset}
    
${bold}General options :${reset}
    C, Create : create a container
    B, Build : build a package onto a container
    M, Manage : manage a container

${bold}Sub options :${reset}
    for Create :
        c, create : create a container
    for Build :
        b, build : build a package onto a container
        r, remake : build a package onto an archived container
    for Manage :
        all lxc- command. Can be designed by the first letter
        but some parsing are impossible. The script will warm you.
        e.g obarun-build M info container
            obarun-build M i container
        You enter extra options from lxc
           e.g obarun-build start container --logfile out
           e.g obarun-build start container --help 
EOF
	exit 0
}

# ${1} command to pass
# ${2} arguments to pass. Can be empty
lxc_command_parse(){
	local command loop_ ret
	local -a parse_opt rest_opt
	
	command="${1}"
	parse_opt=( "${@}" )

	
	# check if lxc-${command} exist
	for loop_ in $(ls /bin/|grep lxc-|sed 's:*::'); do
		if [[ lxc-"${command}" == "${loop_}" ]]; then
			ret=0
			break
		else
			ret=1
		fi
	done
	
	if (( ! $ret )); then
		if [[ "${command}" == @(ls|autostart|checkconfig|top|usernsexec) ]]; then
			rest_opt=( "${parse_opt[@]:1}" )
			"lxc-${command}" "${rest_opt[@]}" || die " Aborting command : lxc-${command} ${parse_opt[@]:1}"
		else
			if [[ -z "${parse_opt[1]}" ]]; then
				die " name must not be empty"
			fi
			# if the container was not stopped before exiting of it
			# the command stop may take time, just warm them
			if [[ "${command}" == "stop" ]]; then
					echo_notvalid " Trying to shutdown ${named}, this may take time..."
			fi
			rest_opt=( "${parse_opt[@]:2}" )
			"lxc-${command}" -n "${parse_opt[1]}" "${rest_opt[@]}" || die " Aborting command : lxc-${command} -n ${parse_opt[1]} ${rest_opt[@]}"
		fi
	else
		die " lxc-${command} doesn't exist"
	fi
	
	#echo_valid " Done"
	
	return 0
}

# ${1} name of the container to create
# ${@} arguments to pass. Can be empty
create(){
	local file named
	local -a file_list _args
	
	mapfile -t file_list < <(ls --group-directories-first ${templates}/*)
	
	named="${1}"
	_args=( "${@}" )
	_args=( "${_args[@]:1}" )

	# check if container directory exist
	# if yes then exit container exit
	check_dir "${target}/${named}"
	if (( ! $? )); then
		echo_info " Container already exit, do you want overwrite it? [y|n] :"
		reply_answer
		if (( $? )); then
			die " Exiting"
		fi
	fi
	# check if templates directory exist on $target
	# create it if doesn't exist
	check_dir "${target}/${named}/${workconf}"
	if (( $? )); then
		echo_display " Create ${target}/${named}/${workconf}"
		mkdir -p "${target}/${named}/${workconf}" || die " Impossible to create directory ${target}/${named}/${workconf}" 
	fi
	# check if configuration templates exist
	# if not create it
	for file in "${file_list[@]}"; do
		file=${file##*/}
		search_in_dir "${target}/${named}" "${workconf}" "${file}"
		if (( $? )); then
			echo_display " Copy ${file} templates file to ${target}/${named}/${workconf}"
			cp "${templates}/${file}" "${target}/${named}/${workconf}" || die " Impossible to copy ${file}"
		fi
	done
	
	# now we have to correct place to find configuration file to create and configure the container
	# so, exporting the good one
	export create_conf="${target}/${named}/${workconf}/create.conf"
	export named="${named}"
	export workdir="${workdir}"
	export workconf="${workconf}"
	lxc_command_parse "create" "${named}" -t "${target}/${named}/${workconf}/create" "${_args[@]}" || die " Impossible to create the container"
	
}

# ${1} name of the container
# ${@} arguments to pass. Can be empty
build(){
	local named
	local -a _args
	named="${1}"
	_args=( "${@}" )
	_args=( "${_args[@]:1}" )

	# check if sources variables is set
	if [[ -z "${sources}" ]]; then
		die " Aborting : sources variables on /etc/obarun/build.conf is not set"
	fi
	
	# be sure that $named exist on $sources directory
	check_dir "${sources}/${named}"
	if (( $? )); then
		die " ${named} do not exist on ${sources} directory"
	fi
	
	# be sure that a PKGBUILD file exit on $sources/$named
	search_in_dir "${sources}" "${named}" "PKGBUILD"
	if (( $? )); then
		die " Aborting : a PKGBUILD file must at least exist into ${sources} directory"
	fi
	# retrieve pkgver and pkgrel to implemente them onto the name
	pkgver_=$(grep pkgver= "${sources}/${named}/PKGBUILD" | awk -F"=" '{print $2}')
	pkgrel_=$(grep pkgrel= "${sources}/${named}/PKGBUILD" | awk -F"=" '{print $2}')
	named_version="${pkgver_}-${pkgrel_}"
	
	# be sure that the named container doesn't exist
	lxc-ls | grep "${named}-${named_version}" &>/dev/null
	if (( ! $? )); then
		echo_error " Container already exist, please choose another name"
	fi
	
	# create the container
	create "${named}-${named_version}" "${_args[@]}"
	
	# copy $sources/$named files onto the container
	#mkdir -p "${target}/${named}-${named_version}/${workdir}/rootfs/tmp/${named}-${named_version}" || die " Impossible to create ${target}/${named}/${workdir}/rootfs/tmp/${named}-${named_version}"
	cp -ra "${sources}/${named}" "${target}/${named}-${named_version}/${workdir}/rootfs/tmp/${named}-${named_version}" || die " Impossible to copy file from ${sources}/${named}-${named_version}"
	#mv "${target}/${named}-${named_version}/${workdir}/rootfs/tmp/${named}" "${target}/${named}-${named_version}/${workdir}/rootfs/tmp/${named}-${named_version}"
	#exit
	# remove existing package and src, pkg directories
	rm -f "${target}/${named}-${named_version}/${workdir}/rootfs/tmp/${named}"/*.pkg.* &>/dev/null
	rm -rf "${target}/${named}-${named_version}/${workdir}/rootfs/tmp/${named}"/{src,pkg} &>/dev/null
	
	# start the container
	lxc_command_parse "start" "${named}-${named_version}" || die " Aborting : impossible to start the container ${named}-${named_version}"
	
	# give a good permissions at the tmp/$named onto the container
	lxc_command_parse "attach" "${named}-${named_version}" --clear-env -v named="${named}-${named_version}" -v newuser="${newuser}" -- bash -c 'echo "${newuser}" "ALL=(ALL)" NOPASSWD: ALL >> /etc/sudoers'
	lxc_command_parse "attach" "${named}-${named_version}" --clear-env -v named="${named}-${named_version}" -v newuser="${newuser}" -- bash -c 'chown -R "${newuser}":users /tmp/"${named}"'
	
	# build the package
	lxc_command_parse "attach" "${named}-${named_version}" --clear-env -v named="${named}-${named_version}" -v newuser="${newuser}" -- bash -c 'cd /tmp/"${named}"; su "${newuser}"  -c "updpkgsums; makepkg -Cs --noconfirm"'
	
	# copy the resulting package on the right place
	check_dir "${result_pkg}/${named}/${named_version}"
	if (( $? )); then
		mkdir -p "${result_pkg}/${named}/${named_version}"
	fi
	cp -f "${target}/${named}-${named_version}/${workdir}/rootfs/tmp/${named}-${named_version}"/*.pkg.tar.* "${result_pkg}/${named}/${named_version}" || echo_info " WARNING : the resulting package can be copied to ${result_pkg}/${named}/${named_version}"
	
	# stop the container
	lxc_command_parse "stop" "${named}-${named_version}" -k

}

remake(){
	echo_bold " Features not implemented yet"
}

################################################################################################################
##																											  ##	
##										sub_functions														  ##
##																											  ##
################################################################################################################

