#!/bin/bash
#
# Functions file for obarun-build package
#
# Authors:
# Eric Vidal <eric@obarun.org>
#
# Copyright (C) 2016 Eric Vidal <eric@obarun.org>
#
# "THE BEERWARE LICENSE" (Revision 42):
# <eric@obarun.org> wrote this file.  As long as you retain this notice you
# can do whatever you want with this stuff. If we meet some day, and you think
# this stuff is worth it, you can buy me a beer in return.   Eric Vidal http://obarun.org
#
# This script is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 

shopt -s extglob

source /usr/lib/obarun/common_functions
source /etc/obarun/build.conf

templates="${templates:-/usr/share/obarun/obarun-build/templates}"
workdir="build_pkg"
workconf="build_conf"
result_conf="/var/cache/obarun/pkgbuild/${named}"

clean_install(){
	echo_bold "clean install"
	
	exit
}

usage(){
	cat << EOF
	
${bold}Usage: ${0} [General options] [Sub options] name

e.g obarun-build Create create container
    obarun-build C c scontainer
    obarun-build B b cups${reset}
    
${bold}General options :${reset}
    C, Create : create a container
    B, Build : build a package onto a container
    M, Manage : manage a container

${bold}Sub options :${reset}
    for Create :
        c, create : create a container
    for Build :
        b, build : build a package onto a container
        r, remake : build a package onto an archived container
    for Manage :
        all lxc- command. Can be designed by the first letter
        but some parsing are impossible. The script will warm you.
        e.g obarun-build M info container
            obarun-build M i container
EOF
	exit 0
}
# {1} name of the container to create
create(){
	local file
	local -a file_list
	mapfile -t file_list < <(ls --group-directories-first ${templates}/*)

	# check if templates directory exist on $target
	# create it if doesn't exist
	check_dir "${target}/${named}/${workconf}"
	if (( $? )); then
		echo_display " Create ${target}/${named}/${workconf}"
		mkdir -p "${target}/${named}/${workconf}" || die " Impossible to create directory ${target}/${named}/${workconf}" 
	fi
	# check if configuration templates exist
	# if not create it
	for file in "${file_list[@]}"; do
		file=${file##*/}
		search_in_dir "${target}/${named}" "${workconf}" "${file}"
		if (( $? )); then
			echo_display " Copy ${file} templates file to ${target}/${named}/${workconf}"
			cp "${templates}/${file}" "${target}/${named}/${workconf}" || die " Impossible to copy ${file}"
		fi
	done
	
	cont_create "${named}"
}

build(){
	
	# check if sources variables is set
	if [[ -z "${sources}" ]]; then
		die " Aborting : sources variables on /etc/obarun/build.conf is not set"
	fi
	
	# be sure that $named exist on $sources directory
	check_dir "${sources}/${named}"
	if (( $? )); then
		die " ${named} do not exist on ${sources} directory"
	fi
	
	# be sure that a PKGBUILD file exit on $sources/$named
	search_in_dir "${sources}" "${named}" "PKGBUILD"
	if (( $? )); then
		die " Aborting : a PKGBUILD file must at least exist into ${sources} directory"
	fi
	
	# be sure that the named container doesn't exist
	lxc-ls | grep "${1}" &>/dev/null
	if (( ! $? )); then
		echo_error " Container already exist, please choose another name"
	fi
	
	# create the container
	create "${named}"
	
	# copy $sources/$named files onto the container
	mkdir -p "${target}/${named}/${workdir}/rootfs/tmp/${named}" || die " Impossible to create ${target}/${named}/${workdir}/rootfs/tmp/${named}"
	cp -r "${sources}/${named}" "${target}/${named}/${workdir}/rootfs/tmp/" || die " Impossible to copy file from ${sources}/${named}"
	
	# remove existing package and src, pkg directories
	rm -f "${target}/${named}/${workdir}/rootfs/tmp/${named}"/*.pkg.* &>/dev/null
	rm -rf "${target}/${named}/${workdir}/rootfs/tmp/${named}"/{src,pkg} &>/dev/null
	
	# start the container
	lxc-start -n "${named}" || die " Aborting : impossible to start the container"
	
	# give a good permissions at the tmp/$named onto the container
	lxc-attach -n "${named}" --clear-env -v named="${named}" -v newuser="${newuser}" -- bash -c 'echo "${newuser} ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers'
	lxc-attach -n "${named}" --clear-env -v named="${named}" -v newuser="${newuser}" -- bash -c 'chown -R ${newuser}:users /tmp/${named}'
	
	# build the package
	lxc-attach -n "${named}" --clear-env -v named="${named}" -v newuser="${newuser}" -- bash -c 'cd /tmp/${named}; su ${newuser}  -c "updpkgsums; makepkg -Cs --noconfirm"' 
	
	# copy the resulting package on the right place
	check_dir "${result_pkg}"
	if (( $? )); then
		mkdir -p "${result_pkg}"
	fi
	cp -f "${target}/${named}/${workdir}/rootfs/tmp/${named}"/*.pkg.tar.* "${result_pkg}" || echo_info " WARNING : the resulting package can be copied to ${result_pkg}/${named}"
	
	# stop the container
	lxc-stop -n "${named}" -k
}

# ${1} regex for lxc- command
# ${2} name of the container to control

lxc_command_parse(){
	local command named loop_ opt ret
	command="${1}"
	named="${2}"
	if [[ ! -z "${3}" ]]; then
		opt="${3}"
	fi
	if [[ -z "${named}" ]] && [[ "${command}" != @(ls|autostart|checkconfig|top|usernsexec) ]]; then
		die " name must not be empty"
	fi
	for loop_ in $(ls /bin/|grep lxc-|sed 's:*::'); do
		if [[ lxc-"${command}" == "${loop_}" ]]; then
			ret=0
			break
		else
			ret=1
		fi
	done
				
	if (( ! $ret )); then
		
		if [[ "${command}" == "stop" ]]; then
			echo_notvalid " Trying to shutdown ${named}"
		fi
		case "${command}" in
			ls|autostart|checkconfig|top|usernsexec)
				eval lxc-"${command}" "${opt}"
				;;
			*)	opt=${opt##*$named}
				eval lxc-"${command}" -n "${named}" "${opt}"
				;;
		esac
	else
		die " lxc-${command} doesn't exist"
	fi
	
	exit 0
}

remake(){
	echo_bold " Features not implemented yet"
}

################################################################################################################
##																											  ##	
##										sub_functions														  ##
##																											  ##
################################################################################################################
# ${1} name of the container to create
cont_create(){
		export named="${1}"
		export workdir="${workdir}"
		export workconf="${workconf}"
		export cont_create_conf="${target}/${named}/${workconf}/cont_create.conf"
		lxc-create -n "${named}" -t "${target}/${named}/${workconf}/cont_create" || die " Impossible to create the container"
}
