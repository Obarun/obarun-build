#!@BINDIR@/bash
# Copyright (c) 2015-2018 Eric Vidal <eric@obarun.org>
# All rights reserved.
# 
# This file is part of Obarun. It is subject to the license terms in
# the LICENSE file found in the top-level directory of this
# distribution and at https://github.com/Obarun/obarun-build/LICENSE
# This file may not be copied, modified, propagated, or distributed
# except according to the terms contained in the LICENSE file.

##		Check is the functions file exits

sourcing(){
	
	local list
	
	for list in /etc/obarun/build.conf /usr/lib/obarun/{util.sh,build.sh}; do
		if [[ -f "${list}" ]]; then
			source "${list}"
		else
			out_error "Missing file : ${list}"
			exit	
		fi
	done
	
	unset list
}
sourcing

shellopts_save
shellopts_set_unset "extglob" 0

##		Clean before exit

trap "clean_install" QUIT KILL INT TERM 

##		Must be run with root privilegies 

(( EUID == 0 )) || die " ${bred}You must be run this script with root privilegies"

##		Let's go

##		Update package or not

main_update(){
	out_action "Do you want to update obarun-build package? [y|n]"

	reply_answer

	if (( ! $? )); then
		pac_update "obarun-build" "/var/lib/obarun/obarun-build" "$GIT_ADDR" || die " Impossible to update" "clean_install"
		sourcing
	else
		out_notvalid "Some functionalities will cannot working properly without updating"
		out_info "Press enter to continue"
		read enter
	fi
}

if [[ "$UPDATE" == "yes" ]]; then
	main_update
fi

if [[ -z "${1}" || -z "${2}" ]] && [[ "${1}" != @(M|m|Manage) ]]; then
	usage
	exit 1
fi

TEMPLATES="${TEMPLATES:-/usr/share/obarun/obarun-build/templates}"
TARGET="${TARGET:-/var/cache/obarun/pkgbuild}"
SAVE_PKG="${SAVE_PKG:-/var/cache/obarun/pkg}"
WORKDIR="container"
WORKCONF="config"
WORKLXC="${WORKLXC:-/var/lib/lxc}"
BUILD_DEST_FILES="/home/${NEWUSER}/tmp"

# check if cgroup devices exist
# if not create it
if [[ ! -d /sys/fs/cgroup/devices ]]; then
	mount -o remount,rw /sys/fs/cgroup
	mkdir /sys/fs/cgroup/devices
	mount -t cgroup -o devices cgroup /sys/fs/cgroup/devices
	mount -o remount,ro /sys/fs/cgroup
fi

#check if the worklxc directory exist
#if not , create it
if [[ -d "${WORKLXC}" ]];then
	mkdir -p -m 0755 "${WORKLXC}"
fi

cmd=( "${@}" )
operation=( "${cmd[0]}" )
target=( "${cmd[1]}" )
target_opts=( "${cmd[@]:1}" )
arguments=( "${cmd[2]}" )
arguments_opts=( "${cmd[@]:3}" )

check_var(){
	echo cmd=${cmd[@]}
	echo operation=${operation[@]}
	echo target=${target[@]}
	#echo target_opts=${target_opts[@]}
	echo arguments=${arguments[@]}
	echo arguments_opts=${arguments_opts[@]}
}
#check_var

case "${operation}" in
	C|Create|c|create)
		parse_create 
	    ;;
	B|Build|b|build)	
		parse_build 
		;;
	M|Manage|m|manage)
		manage "${target}" 
		;;
	*)
	    usage
	    exit 1
	    ;;
esac

exit 0

