#!/bin/bash
## This script was made for provide obarun environment. This scripts is under license BEER-WARE.
# "THE BEER-WARE LICENSE" (Revision 42):
# <eric@obarun.org> wrote this file.  As long as you retain this notice you
# can do whatever you want with this stuff. If we meet some day, and you think
# this stuff is worth it, you can buy me a beer in return.   Eric Vidal

shopt -s extglob

arch="x86_64"
name="buildpkg"
cont_path="/var/cache/obarun/pkgbuild/${name}"
cont_rootfs="/var/cache/obarun/pkgbuild/${name}/rootfs"
#cont_path="/var/lib/lxc/${name}"
#cont_rootfs="/var/lib/lxc/${name}/rootfs"
_cont_conf="/var/lib/lxc/${name}"


pac_conf="/var/lib/obarun/obarun-build/pacman.conf"
lxc_conf="/var/lib/obarun/obarun-build/build_lxc.conf"
pac_list=$(grep -h -v ^# /var/lib/obarun/obarun-build/container.list)
src_functions="/etc"

router_addr="192.168.178.1"
host_interface="enp2s0"
host_addr='192.168.178.2/24'
bridge_interface="lxc-nat"
bridge_addr='192.168.178.3/24'
lxc_network_type="veth"
lxc_network_link="${bridge_interface}"
lxc_network_flags="up"
lxc_network_ipv4="192.168.178.4/24"
lxc_network_ipv4_gateway="${router_addr}"
lxc_network_name="eth0"

hostname="buildcont"
locale="fr_FR.UTF-8"
zone="Indian"
subzone="Reunion"
keymap="fr"
newuser="userbuild"
passw_root="toor"
passw_user="toor"

##		Check is the functions file exits

if [[ -f /usr/lib/obarun/common_functions ]]; then
	source /usr/lib/obarun/common_functions
else
	echo "==>> Missing file : common_functions"
	exit	
fi


custo_once() {
	local _tmp
	_tmp="/tmp/obarun-build-tmp"
	
	if [[ ! -d $_tmp ]]; then
		mkdir -p -m0750 $_tmp || die " Impossible to create $_tmp"
	fi
    if [[ ! -e $_tmp/customize.${1} ]]; then
        $1 || die " Cannot execute $_"
        touch $_tmp/customize.${1}
    fi
    unset _tmp
}

config_hostname(){
	echo_display " Define hostname as : ${hostname}"
	if [[ "$hostname" != "" ]]; then
		sed -i 's/ .*$//' /etc/hosts
	fi

	sed -i "s/HOSTNAME=.*$/HOSTNAME=$hostname/g" /etc/s6/s6.conf
	
	echo "$hostname" > /etc/hostname
	sed -i '/127.0.0.1/s/$/ '$hostname'/' /etc/hosts
	sed -i '/::1/s/$/ '$hostname'/' /etc/hosts
	
	echo_valid " hostname was configured successfully"
}
custo_once config_hostname

config_locale(){
	echo_display " Define locale"
	locale-gen
	echo LANG="$locale" > /etc/locale.conf
    echo LC_COLLATE=C >> /etc/locale.conf
	
	echo_valid " Locale was created successfully"
}
custo_once config_locale

config_localetime(){
	echo_display " Define localtime"
	if [[ "$subzone" != "" ]]; then
		ln -sf /usr/share/zoneinfo/$zone/$subzone /etc/localtime
		sed -i "s/TZ=.*$/TZ=$zone\/$subzone/g" /etc/s6/s6.conf
				
	else
		ln -sf /usr/share/zoneinfo/$zone /etc/localtime
		sed -i "s/TZ=.*$/TZ=$zone/g" /etc/s6/s6.conf
	fi
	
	echo_valid " Localetime was configured successfully"
}
custo_once config_localetime

config_user(){
	echo_display " Define ${newuser}"
	
	useradd -m -g users -G "floppy,network,rfkill,storage,optical,wheel,power" -s /usr/bin/bash "${newuser}"
	
	echo "${newuser}:${passw_user}" | chpasswd || die " Failed to change $newuser password"
	
	sed -i "s:^# %wheel ALL=(ALL) NOPASSWD: ALL:%wheel ALL=(ALL) NOPASSWD: ALL:" /etc/sudoers
	
	echo_valid " User ${newuser} was created successfully" 
}
custo_once config_user

config_root(){
	echo_display " Define root"

	echo "root:${passw_user}" | chpasswd || die " Failed to change root password"
	
	echo_valid " root user was configured successfully" 
}
custo_once config_root

config_keymap(){
	echo_display " Define keymap"
	sed -i "s,KEYMAP=.*$,KEYMAP=$keymap,g" /etc/s6/s6.conf
		
	echo_valid " Console keymap was configured successfully"
}
custo_once config_keymap

add_at_logroup(){
	echo_display " add {root,$newuser} at log group"
	gpasswd -a root log
	gpasswd -a "$newuser" log
}
custo_once add_at_logroup 

config_bash(){
	local which
	
	cat <<- EOF >> /etc/profile 
umask 022

# Set the initial path
export PATH=/usr/local/bin:/usr/bin
export LANG=C
for script in /etc/profile.d/*.sh ; do
        if [ -r $script ] ; then
                . $script
        fi
done

# Setup a red prompt for root and a green one for users.
NORMAL="\[\e[0m\]"
RED="\[\e[1;31m\]"
GREEN="\[\e[1;32m\]"
if [[ $EUID == 0 ]] ; then
  PS1="$RED\u [ $NORMAL\w$RED ]# $NORMAL"
else
  PS1="$GREEN\u [ $NORMAL\w$GREEN ]\$ $NORMAL"
fi

unset script NORMAL RED GREEN
EOF
	for which in /home/"${newuser}"/.bashrc \
				/root/.bashrc \
				/etc/skel/.bashrc; do
	cat <<- EOF >> "${which}"
NORMAL="\[\e[0m\]"
RED="\[\e[1;31m\]"
GREEN="\[\e[1;32m\]"
if [[ $EUID == 0 ]] ; then
  PS1="$RED\u [ $NORMAL\w$RED ]# $NORMAL"
else
  PS1="$GREEN\u [ $NORMAL\w$GREEN ]\$ $NORMAL"
fi

unset RED GREEN NORMAL
EOF
	done
	# make same for root
	cp -f /home/"${newuser}"/.bash_profile /root/.bash_profile
	cp -f /home/"${newuser}"/.bashrc /root/.bashrc
	cp -f /home/"${newuser}"/.bash_profile /etc/skel/.bash_profile
	cp -f /home/"${newuser}"/.bashrc /etc/skel/.bashrc
}
#custo_once config_bash

echo_valid " Customization terminate"

